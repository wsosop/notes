<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:mybatis-spring="http://mybatis.org/schema/mybatis-spring"
	xsi:schemaLocation="http://mybatis.org/schema/mybatis-spring http://mybatis.org/schema/mybatis-spring-1.2.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd">

<!-- 扫描包 -->
<context:component-scan base-package="com.wck.ssm">
	<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
</context:component-scan>

<context:property-placeholder location="classpath:dbconfig.properties"/>

<!-- 数据连接池 -->
<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
	<property name="driverClass" value="${jdbc.driver}"></property>
	<property name="jdbcUrl" value="${jdbc.url}"></property>
	<property name="user" value="${jdbc.username}"></property>
	<property name="password" value="${jdbc.password}"></property>
</bean>

<!-- 配置事务管理器 -->
<bean id="dataSourceTransactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
	<property name="dataSource" ref="dataSource"></property>
</bean>

<!-- 配置注解式事务  -->
<tx:annotation-driven transaction-manager="dataSourceTransactionManager"/>

<!-- 配置mybatis -->
	<!-- 
	整合mybatis 
		目的：1、spring管理所有组件。mapper的实现类。
				service==>Dao   @Autowired:自动注入mapper；
			2、spring用来管理事务，spring声明式事务
	-->
	<!--创建出SqlSessionFactory对象  -->
<bean id="sqlSessionFactoryBean" class="org.mybatis.spring.SqlSessionFactoryBean">
	<!-- 配置数据源 -->
	<property name="dataSource" ref="dataSource"></property>
	<!-- configLocation指定全局配置文件的位置 -->
	<property name="configLocation" value="classpath:mybatis-config.xml"></property>
	<!--mapperLocations: 指定mapper文件的位置-->
	<property name="mapperLocations" value="classpath:mybatis/mapper/*.xml"></property>
	<property name="plugins">
		<array>
 			<bean id="sqlStatementInterceptor" class="com.wck.ssm.interceptor.SqlStatementInterceptor">
				<property name="properties">
					<!-- 使用下面的方式配置参数，一行配置一个 on：1 开启打印具体sql,0 关闭 -->
			          <value>
			            on=1
			          </value>
				</property>
			</bean> 
			
			 <bean class="com.github.pagehelper.PageInterceptor">
                <!-- 这里的几个配置主要演示如何使用，如果不理解，一定要去掉下面的配置 -->
 <!-- reasonable：
	 		分页合理化参数，默认值为false。当该参数设置为 true 时，pageNum<=0 时会查询第一页，
	  		pageNum>pages（超过总数时），会查询最后一页。默认false 时，直接根据参数进行查询。
	  supportMethodsArguments：
	  		支持通过 Mapper 接口参数来传递分页参数，默认值false，分页插件会从查询方法的参数值中，
	  		自动根据上面 params 配置的字段中取值，查找到合适的值时就会自动分页
	  autoRuntimeDialect:
	  		如果你在 Spring 中配置了动态数据源，并且连接不同类型的数据库，
	  		这时你可以配置 autoRuntimeDialect 为 true，这样在使用不同数据源时，会使用匹配的分页进行查询
   	  params=count=countSql
   -->
                <property name="properties">
                    <value>
                        helperDialect=mysql
                        reasonable=true
                        supportMethodsArguments=true
                        autoRuntimeDialect=true
                    </value>
                </property>
            </bean>
		</array>
	</property> 
</bean>

	<!--配置一个可以进行批量执行的sqlSession  -->
	<bean id="sqlSessionBatch" class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg name="sqlSessionFactory" ref="sqlSessionFactoryBean"></constructor-arg>
		<constructor-arg name="executorType" value="BATCH"></constructor-arg>
	</bean> 
	

<!-- 扫描所有的mapper接口的实现，让这些mapper能够自动注入；
	base-package：指定mapper接口的包名
	 -->
	<mybatis-spring:scan base-package="com.wck.ssm.dao"/>
	<!-- <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.atguigu.mybatis.dao"></property>
	</bean> -->
	
</beans>
