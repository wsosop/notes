## 代理模式和静态代理

<u>备注</u>：getConstructor 用法，用到的很多。

```
Class[] classes=new Class[] {String.class,int.class};
//getConstructor 参数是：表示 newInstance新建实例的参数类型
//newInstance  参数是：一个 object数组，里面传递建新实例的构造函数的 具体参数
Student student =Student.class.getConstructor(classes).newInstance(new Object[] {"wck",18});
```

**代理**  
**• 代理(Proxy)：代替处理**  
**–代理服务器**  
**–代理经纪人**  
**–……**  

<img src="./代理.png" alt="代理" style="zoom:80%;" />





**代理模式**  
**• 代理模式**  
**–Proxy Pattern, 23个经典模式的一种，又称委托模式**  
**–为目标对象提供(包装)了一个代理，这个代理可以控制对目标对象的访问**  
**• 外界不用直接访问目标对象，而是访问代理对象，由代理对象再调用目标对象**  
**• 代理对象中可以添加监控和审查处理**  
**–David Wheeler(函数的发明者)：All problems in computer science can be solved by another level of indirection。**  



**静态代理**  
**• Java代理：静态代理和动态代理**  
**• 静态代理**  
**–代理对象持有目标对象的句柄**  
**–所有调用目标对象的方法，都调用代理对象的方法**  
**–对每个方法，需要静态编码(理解简单，但代码繁琐)**  

![静态代理](./静态代理.png)



```java
└─src
    │  StaticProxy.java
    │  StaticProxyDemo.java
    │  Subject.java
    │  SubjectImpl.java
```



```java
//接口
public interface Subject{
    public void request();
}
```

```java

//目标对象
class SubjectImpl implements Subject{
  public void request(){
      System.out.println("I am dealing the request.");
  }
}
```

```java

//代理对象
class StaticProxy implements Subject{
	//实际目标对象
    private Subject subject;
    
    public StaticProxy(Subject subject){
        this.subject = subject;
    }
    
    public void request(){
        System.out.println("PreProcess");
        subject.request();
        System.out.println("PostProcess");
    }
}

```

```java

//静态代理模式
public class StaticProxyDemo {
    public static void main(String args[]){
    	//创建实际对象
        SubjectImpl subject = new SubjectImpl();
        
        //把实际对象封装到代理对象中
        StaticProxy p = new StaticProxy(subject);
        p.request();
    }
}
```



**总结**  
**• 了解代理模式**  
**• 了解Java的静态代理模式**  
**–隐藏实际的目标对象**  
**–对方法的实现前后可以进行前置处理和后置处理**  

